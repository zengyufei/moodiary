name: Build Windows

on:
  workflow_dispatch:

  push:
    branches: [ master ]
    paths:
      - '**/*'
      - '!README.md'
      - '!LICENSE'
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows Executable

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: choco install jq

      - name: Read Flutter Version
        id: flutter_version
        shell: bash
        run: |
          if [ -f .fvmrc ]; then
            FLUTTER_VERSION=$(cat .fvmrc | jq -r '.flutter')
            echo "Flutter version detected: $FLUTTER_VERSION"
            echo "flutter-version=$FLUTTER_VERSION" >> $GITHUB_ENV
          else
            echo ".fvmrc not found. Defaulting to latest Flutter version."
            echo "flutter-version=stable" >> $GITHUB_ENV
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter-version }}

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release --obfuscate --split-debug-info=splitMap

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: build/windows/x64/runner/Release

          

  release:
    runs-on: ubuntu-latest
    name: Publish Release
    needs: [ build-windows ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: artifacts/windows

      - name: Zip
        run: |
          pwd
          cd artifacts/windows
          zip -r mood_diary.zip ./*
          mv mood_diary.zip ../../
                
      - name: Get release asset ID
        id: get_asset_id
        run: |
          TAG_NAME=release
          ASSET_NAME="mood_diary.zip"
          ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | \
            jq -r ".assets[] | select(.name == \"$ASSET_NAME\") | .id")
          
          echo "ASSET_ID=$ASSET_ID" >> $GITHUB_ENV
          echo "Found asset ID: $ASSET_ID"

      - name: Delete old release asset
        if: env.ASSET_ID != ''
        run: |
          echo "Deleting asset with ID: $ASSET_ID"
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
            
      - name: Upload to Release
        if: success()
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: mood_diary.zip
          asset_name: mood_diary.zip
          tag: release
