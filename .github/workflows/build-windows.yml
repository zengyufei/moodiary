name: Build Windows

on:
  workflow_dispatch:

  push:
    branches: [ master ]
    paths:
      - '**/*'
      - '!README.md'
      - '!LICENSE'
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows Executable

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: choco install jq

      - name: Read Flutter Version
        id: flutter_version
        shell: bash
        run: |
          if [ -f .fvmrc ]; then
            FLUTTER_VERSION=$(cat .fvmrc | jq -r '.flutter')
            echo "Flutter version detected: $FLUTTER_VERSION"
            echo "flutter-version=$FLUTTER_VERSION" >> $GITHUB_ENV
          else
            echo ".fvmrc not found. Defaulting to latest Flutter version."
            echo "flutter-version=stable" >> $GITHUB_ENV
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter-version }}

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mood_diary
          path: build/windows/x64/runner/Release

          

  release:
    runs-on: ubuntu-latest
    name: Publish Release
    needs: [ build-windows ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: artifacts/android

      - name: Get Latest Tag
        id: latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0
        with:
          fetch-all-tags: true
          sort-tags: true

      - name: Extract Tag Version
        id: extract_tag_version
        run: |
          tag="${{ steps.latest_tag.outputs.tag }}"
          version="${tag#v}"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Rename Artifacts
        run: |
          mkdir -p renamed-artifacts
          mv artifacts/android/app-release.apk renamed-artifacts/moodiary-${{ env.VERSION }}-android-arm64.apk

      - name: Generate Release Notes
        id: release_notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          tag: v${{ env.VERSION }}
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: renamed-artifacts/*
          tag: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          body: ${{ steps.release_notes.outputs.body }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
